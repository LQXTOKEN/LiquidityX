// main.js
//
// üì¶ Entry point œÑŒøœÖ ŒµœÅŒ≥Œ±ŒªŒµŒØŒøœÖ. Œ£œÖŒΩŒ¥Œ≠ŒµŒπ UI ŒºŒµ modules Œ∫Œ±Œπ triggers.
// ‚úÖ ŒîŒµŒΩ œÄŒµœÅŒπŒ≠œáŒµŒπ Œ∫Œ±ŒºŒØŒ± business ŒªŒøŒ≥ŒπŒ∫ŒÆ ‚Äî œåŒªŒ± œÑŒ± calls Œ≥ŒØŒΩŒøŒΩœÑŒ±Œπ œÉŒµ modules.

document.addEventListener("DOMContentLoaded", async () => {
  console.log("[main.js] DOM loaded");

  try {
    await CONFIG.loadAbis();
    console.log("[main.js] ‚úÖ ABIs loaded and verified");
  } catch (e) {
    return uiModule.showError("‚ùå Failed to load smart contract definitions");
  }

  // üîÑ Initial placeholder log
  uiModule.updateLastAirdrops();

  // üü¢ ŒöŒøœÖŒºœÄŒØ œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ
  document.getElementById("connectWallet").addEventListener("click", () => {
    console.log("[main.js] Connect button clicked");
    window.handleWalletConnected();
  });

  // üî¥ ŒöŒøœÖŒºœÄŒØ Œ±œÄŒøœÉœçŒΩŒ¥ŒµœÉŒ∑œÇ
  document.getElementById("disconnectWallet").addEventListener("click", () => {
    walletModule.disconnectWallet();
    uiModule.resetUI();
  });

  // üîÅ ŒöŒøœÖŒºœÄŒØ ŒµœÄŒ±ŒΩŒ¨ŒªŒ∑œàŒ∑œÇ Œ±œÄŒøœÑœÖœáŒ∑ŒºŒ≠ŒΩœâŒΩ
  document.getElementById("retryFailedButton").addEventListener("click", () => {
    window.appRetry();
  });

  // üí∏ ŒöŒøœÖŒºœÄŒØ Œ±ŒΩŒ¨Œ∫œÑŒ∑œÉŒ∑œÇ tokens
  document.getElementById("recoverTokensButton").addEventListener("click", () => {
    window.appRecover();
  });

  // üì¶ ŒöŒøœÖŒºœÄŒØ œÄœÅŒøŒ≤ŒøŒªŒÆœÇ œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒ∑œÇ ŒµŒ≥Œ≥œÅŒ±œÜŒÆœÇ
  document.getElementById("checkRecordButton").addEventListener("click", () => {
    document.getElementById("recoveryCard").style.display = "block";
    window.appRecover(); // ŒÆ Œ±ŒΩ Œ∏ŒµœÇ, show fetch-only: sendModule.checkMyRecord()
  });

  // üîç Token validation
  document.getElementById("checkToken").addEventListener("click", () => {
    console.log("[main.js] Check Token button clicked");
    const tokenAddr = document.getElementById("tokenAddressInput").value.trim();
    tokenModule.checkToken(tokenAddr);
  });

  // üîÄ Mode selection
  document.getElementById("modeSelect").addEventListener("change", (e) => {
    const mode = e.target.value;
    console.log("[main.js] Mode changed:", mode);
    uiModule.showModeSection(mode);
  });

  // üß† Fetch addresses
  document.getElementById("proceedButton").addEventListener("click", async () => {
    console.log("[main.js] Proceed button clicked");

    const token = tokenModule.getSelectedToken();
    if (!token) {
      uiModule.showError("‚ùå Please select a token first");
      return;
    }

    try {
      const mode = document.getElementById("modeSelect").value;
      const addresses = await addressModule.fetchAddresses(mode);

      if (!addresses.length) {
        uiModule.showError("‚ùå No valid addresses found");
        return;
      }

      uiModule.displayAddresses(addresses);
    } catch (err) {
      console.error("[main.js] Address fetch error:", err);
      uiModule.showError("‚ùå Failed to fetch addresses");
    }
  });

  // üöÄ Send Airdrop
  document.getElementById("sendButton").addEventListener("click", () => {
    console.log("[main.js] Send button clicked");

    const amountStr = document.getElementById("tokenAmountPerUser").value.trim();
    const recipients = uiModule.getDisplayedAddresses();

    if (!amountStr || isNaN(amountStr)) {
      uiModule.showError("‚ùå Invalid amount");
      return;
    }

    if (!recipients.length) {
      uiModule.showError("‚ùå No recipients to send to");
      return;
    }

    const token = tokenModule.getSelectedToken();
    if (!token) {
      uiModule.showError("‚ùå No token selected");
      return;
    }

    const amount = ethers.utils.parseUnits(amountStr, token.decimals);
    console.log("[main.js] Parsed amount in wei:", amount.toString());

    window.appSend(amount, recipients);
  });

  console.log("[main.js] Initialization complete ‚úÖ");
});
