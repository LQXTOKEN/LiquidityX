// js/modules/send.js

window.sendModule = (function () {
  async function sendAirdrop(tokenAddress, symbol, amountPerUser, recipients, signer) {
    try {
      const userAddress = await signer.getAddress();

      // ‚úÖ ŒàŒªŒµŒ≥œáŒøœÇ Œ≥ŒπŒ± ŒºŒ∑ Œ≠Œ≥Œ∫œÖœÅŒµœÇ Œ¥ŒπŒµœÖŒ∏œçŒΩœÉŒµŒπœÇ
      const invalids = recipients.filter(
        (addr) => !ethers.utils.isAddress(addr) || addr === ethers.constants.AddressZero
      );
      if (invalids.length > 0) {
        uiModule.showError(`‚ùå Invalid address found: ${invalids[0]}`);
        return;
      }

      const token = new ethers.Contract(tokenAddress, CONFIG.ERC20_ABI, signer);
      const userBalance = await token.balanceOf(userAddress);
      const totalRequired = amountPerUser.mul(recipients.length);

      // ‚úÖ ŒüœÅŒπœÉŒºœåœÇ fee (œÄ.œá. 500 tokens) Œ∫Œ±Œπ ŒºŒµœÑŒ±œÑœÅŒøœÄŒÆ œÉŒµ wei, ŒºŒµ Œ≤Œ¨œÉŒ∑ œÑŒ± decimals œÑŒøœÖ token
      const fee = ethers.utils.parseUnits("500", window.selectedToken.decimals);
      const totalForApprove = totalRequired.add(fee);

      // ‚úÖ ŒàŒªŒµŒ≥œáŒøœÇ balance: œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± Œ≠œáŒµŒπœÇ Œ±œÅŒ∫ŒµœÑŒ¨ Œ≥ŒπŒ± œÄŒøœÉœåœÑŒ∑œÑŒ± + fee
      if (userBalance.lt(totalForApprove)) {
        const userFormatted = ethers.utils.formatUnits(userBalance);
        const requiredFormatted = ethers.utils.formatUnits(totalForApprove);
        uiModule.showError(
          `‚ùå Insufficient balance: You need ${requiredFormatted} ${symbol} (including fee), but only have ${userFormatted}`
        );
        return;
      }

      // ‚úÖ APPROVE: ŒìŒπŒ± œÑŒ∑ŒΩ Œ±œÄŒøœÉœÑŒøŒªŒÆ tokens + fee
      uiModule.addLog(`üîÑ Approving ${symbol} (amount + fee) for ${recipients.length} recipients...`);
      const approveTx = await token.approve(CONFIG.AIRDROP_CONTRACT_PROXY, totalForApprove);
      uiModule.addLog(`‚õΩ Approve TX sent: ${approveTx.hash}`);
      await approveTx.wait();
      uiModule.addLog(`‚úÖ Approved successfully.`);

      // ‚úÖ Airdrop Execution (Œ∑ fee Œ¥ŒπŒ±œáŒµŒπœÅŒØŒ∂ŒµœÑŒ±Œπ ŒµœÉœâœÑŒµœÅŒπŒ∫Œ¨ Œ±œÄœå œÑŒø smart contract)
      const airdrop = new ethers.Contract(CONFIG.AIRDROP_CONTRACT_PROXY, CONFIG.BATCH_AIRDROP_ABI, signer);
      uiModule.addLog(`üöÄ Sending airdrop to ${recipients.length} recipients...`);
      const tx = await airdrop.batchTransferSameAmount(tokenAddress, recipients, amountPerUser);
      uiModule.addLog(`‚õΩ Airdrop TX sent: ${tx.hash}`);
      await tx.wait();
      uiModule.addLog(`‚úÖ Airdrop completed.`);

      // ‚úÖ ŒàŒªŒµŒ≥œáŒøœÇ Œ±œÄŒøœÑœÖœáŒ∑ŒºŒ≠ŒΩœâŒΩ œÄŒ±œÅŒ±ŒªŒ∑œÄœÑœéŒΩ
      try {
        const failed = await airdrop.getFailedRecipients(tokenAddress, userAddress);
        if (failed.length > 0) {
          uiModule.addLog(`‚ö†Ô∏è ${failed.length} failed recipients. Retry or recover available.`);
          uiModule.enableDownloadFailed(failed, (arr) => {
            const blob = new Blob([arr.join("\n")], { type: "text/plain" });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "failed_recipients.txt";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          });
          document.getElementById("retryFailedButton").style.display = "inline-block";
          document.getElementById("recoverTokensButton").style.display = "inline-block";
        } else {
          uiModule.addLog(`üéâ All recipients succeeded!`);
        }
      } catch (e) {
        uiModule.addLog(`‚ÑπÔ∏è Could not verify failed recipients.`, "warn");
        console.warn("[getFailedRecipients]", e);
      }
    } catch (err) {
      console.error("[sendAirdrop] ‚ùå Error:", err);
      uiModule.addLog("‚ùå Airdrop failed: " + (err.reason || err.message || "Unknown error"), "error");
    }
  }

  async function checkMyRecord(signer) {
    try {
      const airdrop = new ethers.Contract(CONFIG.AIRDROP_CONTRACT_PROXY, CONFIG.BATCH_AIRDROP_ABI, signer);
      const user = await signer.getAddress();
      const records = await airdrop.getUserRecords(user);

      const out = document.getElementById("recoveryResults");
      out.innerHTML = `<p><strong>Total Records:</strong> ${records.length}</p>`;
      records.forEach((r, i) => {
        out.innerHTML += `<p>#${i + 1} ‚ûù token: ${r.token}, failed: ${r.failedRecipients.length}</p>`;
      });

      uiModule.addLog(`üì¶ Found ${records.length} past airdrop(s).`);
    } catch (err) {
      console.error("[checkMyRecord] ‚ùå", err);
      uiModule.addLog("‚ùå Failed to fetch your records.", "error");
    }
  }

  async function retryFailed(signer, tokenAddress) {
    try {
      uiModule.addLog("üîÅ Retrying failed recipients...");
      const airdrop = new ethers.Contract(CONFIG.AIRDROP_CONTRACT_PROXY, CONFIG.BATCH_AIRDROP_ABI, signer);
      const tx = await airdrop.retryFailed(tokenAddress);
      uiModule.addLog(`‚õΩ Retry TX sent: ${tx.hash}`);
      await tx.wait();
      uiModule.addLog("‚úÖ Retry completed.");
    } catch (err) {
      console.error("[retryFailed] ‚ùå", err);
      uiModule.addLog("‚ùå Retry failed: " + (err.message || "Unknown error"), "error");
    }
  }

  async function recoverTokens(signer, tokenAddress) {
    try {
      uiModule.addLog("üí∏ Recovering tokens from failed recipients...");
      const airdrop = new ethers.Contract(CONFIG.AIRDROP_CONTRACT_PROXY, CONFIG.BATCH_AIRDROP_ABI, signer);
      const tx = await airdrop.recoverFailedTransfer(tokenAddress);
      uiModule.addLog(`‚õΩ Recover TX sent: ${tx.hash}`);
      await tx.wait();
      uiModule.addLog("‚úÖ Recovery completed.");
    } catch (err) {
      console.error("[recoverTokens] ‚ùå", err);
      uiModule.addLog("‚ùå Recovery failed: " + (err.message || "Unknown error"), "error");
    }
  }

  return {
    sendAirdrop,
    checkMyRecord,
    retryFailed,
    recoverTokens
  };
})();
